{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","React","createElement","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","data-bs-parent","Navbar","concat","Link","to","title","aria-label","aria-current","aboutText","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","heading","value","onChange","event","target","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","defaultProps","Alert","height","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","Router","cls","document","body","classList","remove","add","Routes","Route","exact","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.f0dcc0ec.chunk.js","sourcesContent":["// import React, { useState } from \"react\";\r\nimport React from \"react\";\r\n\r\nexport default function About(props) {\r\n  // const [myStyle, setMyStyle] = useState({\r\n  //   color: \"black\",\r\n  //   backgroundColor: \"white\",\r\n  // });\r\n  let myStyle={\r\n    color:props.mode==='dark'?'white':'#042743',\r\n    backgroundColor:props.mode==='dark'?'rgb(36 74 104':'white'\r\n  }\r\n  // const [btntext, setBtnText] = useState(\"Enable Dark Mode\");\r\n\r\n  // const toggleStyle = () => {\r\n  //   if (myStyle.color === \"white\") {\r\n  //     setMyStyle({\r\n  //       color: \"black\",\r\n  //       backgroundColor: \"white\",\r\n  //     });\r\n  //     setBtnText(\"Enable Light Mode\");\r\n  //   } else {\r\n  //     setMyStyle({\r\n  //       color: \"white\",\r\n  //       backgroundColor: \"black\",\r\n  //       border: \"1px solid white\",\r\n  //     });\r\n  //     setBtnText(\"Enable Dark Mode\");\r\n  //   }\r\n  // };\r\n  return (\r\n    <div className=\"container\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n      <h1 className=\"my-2\">About Us</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              <strong>Analyze your text</strong>\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              Textutils gives you a way to analyze your text quickly and efficiently. Be it word count,character count or\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              <strong>Free to use</strong>\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              TextUtils is a free character counter tool that provides instant character count and word count statistics for a given text. TextUtils reports the number of words and characters. Thus it suitable for writing text with word/ character limit.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n             <strong>Browser Compatible</strong>\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              This word counter software works in any web browsers such as Chrome Firefox, Internet Explorer, Safari, Opera. It suits to count characters in facebook, blog, books, excel document, pdf document, essays, etc.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"container my-3\">\r\n        <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary\">\r\n          {btntext}\r\n        </button>\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport { Link } from 'react-router-dom';\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link>\r\n        {/* <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a> */}\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n              {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a> */}\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          {/* <div className=\"d-flex\">\r\n            <div className=\"bg-primary rounded mx-2\" onClick={()=>{props.toggleMode('primary')}} style={{height:'30px',width:'30px',cursor:\"pointer\"}}></div>\r\n            <div className=\"bg-danger rounded mx-2\" onClick={()=>{props.toggleMode('danger')}} style={{height:'30px',width:'30px',cursor:\"pointer\"}}></div>\r\n            <div className=\"bg-success rounded mx-2\" onClick={()=>{props.toggleMode('success')}} style={{height:'30px',width:'30px',cursor:\"pointer\"}}></div>\r\n            <div className=\"bg-warning rounded mx-2\" onClick={()=>{props.toggleMode('warning')}} style={{height:'30px',width:'30px',cursor:\"pointer\"}}></div>\r\n            <div className=\"bg-light rounded mx-2\" onClick={()=>{props.toggleMode('light')}} style={{height:'30px',width:'30px',cursor:\"pointer\"}}></div>\r\n            <div className=\"bg-dark rounded mx-2\" onClick={()=>{props.toggleMode('dark')}} style={{height:'30px',width:'30px',cursor:\"pointer\"}}></div>\r\n          </div> */}\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div\r\n            className={`form-check form-switch text-${props.mode === 'light' ? 'Dark' : 'light'}`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={()=>{props.toggleMode(null)}}\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Toggle Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: propTypes.string.isRequired,\r\n  aboutText: propTypes.string,\r\n};\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutText: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n\r\n  const handleUpClick = () => {\r\n    // console.log(\"Uppercase was clicked\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to uppercase!\", \"success\");\r\n  };\r\n  const handleLoClick = () => {\r\n    // console.log(\"Uppercase was clicked\");\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lowercase!\", \"success\");\r\n  };\r\n  const handleClearClick = () => {\r\n    // console.log(\"Uppercase was clicked\");\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text Cleared!\", \"success\");\r\n  };\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"On change\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    // var text = document.getElementById(\"myBox\");\r\n    // text.select();\r\n    navigator.clipboard.writeText(text);\r\n    // document.getSelection().removeAllRanges();\r\n    props.showAlert(\"Copied to clipboard\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces removed\", \"success\");\r\n  };\r\n  const [text, setText] = useState(\"\");\r\n  //test=\"new text\"; //Wrong way to change the state\r\n  //setText(\"new text\"); //Correct way to change the state\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h1 className=\"mb-4\">{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"#13466e\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"#042743\",\r\n            }}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>\r\n          Clear Text\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>\r\n          Copy Text\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>\r\n          Remove extra spaces\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h1>Your text summary</h1>\r\n        <p>\r\n          {\r\n            text.split(/\\s+/).filter((element) => {\r\n              return element.length !==0;\r\n            }).length\r\n          }{\" \"}\r\n          words and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").filter((element) => {\r\n              return element.length !==0;\r\n            }).length} Minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p>\r\n          {text.length > 0\r\n            ? text\r\n            : \"ENothing to preview!\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    <div style={{height:'50px'}}>\r\n    {props.alert && \r\n      <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        \r\n      </div>}\r\n      </div>\r\n  );\r\n}\r\nexport default Alert;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport {BrowserRouter as Router, Routes, Route} from \"react-router-dom\"\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); //whether dark mode is enabled orn not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\nconst removeBodyClasses=()=>{\n  document.body.classList.remove('bg-light')\n  document.body.classList.remove('bg-dark')\n  document.body.classList.remove('bg-warning')\n  document.body.classList.remove('bg-danger')\n  document.body.classList.remove('bg-success')\n  document.body.classList.remove('bg-primary')\n}\n\n  const toggleMode = (cls) => {\n    removeBodyClasses()\n    document.body.classList.add('bg-'+cls)\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      // document.title = \"TextUtils - Dark Mode\";\n      // setInterval(() => {\n      //   document.title = \"TextUtils  is Amazing\";\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = \"Install TextUtils\";\n      // }, 1500);\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      // document.title = \"TextUtils - Light Mode\";\n    }\n  };\n  return (\n    <>\n      {/*  <Navbar title=\"Textutils\" aboutText=\"About Textutils\" /*/}\n      {/* <Navbar/> */}\n      <Router>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <Routes>\n          {/* /users-->component-1\n          /users/ome-->-->component-2 */}\n          <Route  exact path=\"/about\" element={<About mode={mode}/>}/>\n          {/*exact path*/}\n          \n          <Route  path=\"/\" element={<TextForm\n          showAlert={showAlert}\n          heading=\"Try TextUtils - Word Counter, Character Counter, Remove extra spaces\"\n          mode={mode}\n        />}/>\n          {/* <TextForm\n          showAlert={showAlert}\n          heading=\"Enter the text to analyze below\"\n          mode={mode}\n        /> */}\n        </Routes>        \n      </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}