{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.c500ab74.chunk.js","sourcesContent":["import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\n// import { Link } from 'react-router-dom';\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        {/* <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link> */}\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link> */}\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div\r\n            className={`form-check form-switch text-${props.mode === 'light' ? 'Dark' : 'light'}`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable DarkMode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: propTypes.string.isRequired,\r\n  aboutText: propTypes.string,\r\n};\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutText: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"Uppercase was clicked\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to uppercase!\", \"success\");\r\n  };\r\n  const handleLoClick = () => {\r\n    // console.log(\"Uppercase was clicked\");\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lowercase!\", \"success\");\r\n  };\r\n  const handleClearClick = () => {\r\n    // console.log(\"Uppercase was clicked\");\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text Cleared!\", \"success\");\r\n  };\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"On change\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied to clipboard\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces removed\", \"success\");   \r\n  };\r\n  const [text, setText] = useState(\"\");\r\n  //test=\"new text\"; //Wrong way to change the state\r\n  //setText(\"new text\"); //Correct way to change the state\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{backgroundColor: props.mode==='dark'? 'grey': 'white', color: props.mode==='dark'?'white':'#042743' }}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>\r\n          Clear Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>\r\n          Copy Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove extra spaces</button>\r\n      </div>\r\n      <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n        <h1>Your text summary</h1>\r\n        <p>\r\n          {text.split(\" \").length} words and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n        <h2>Preview</h2>\r\n<p>{text.length>0?text:\"Enter something in the above textbox to preview it here\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && \r\n      <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        \r\n      </div>\r\n    \r\n  );\r\n}\r\nexport default Alert;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n// import {BrowserRouter as Router, Routes, Route} from \"react-router-dom\"\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); //whethe dark mode is enabled orn not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n      // setInterval(() => {\n      //   document.title = \"TextUtils  is Amazing\";\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = \"Install TextUtils\";\n      // }, 1500);\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Light Mode\";\n    }\n  };\n  return (\n    <>\n      {/*  <Navbar title=\"Textutils\" aboutText=\"About Textutils\" /*/}\n      {/* <Navbar/> */}\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Routes> */}\n          {/* /users-->component-1\n          /users/ome-->-->component-2 */}\n          {/* <Route  exact path=\"/about\" element={<About/>}/> */}\n          {/*exact path*/}\n          \n          {/* <Route  path=\"/\" element={<TextForm\n          showAlert={showAlert}\n          heading=\"Enter the text to analyze below\"\n          mode={mode}\n        />}/> */}\n          <TextForm\n          showAlert={showAlert}\n          heading=\"Enter the text to analyze below\"\n          mode={mode}\n        />\n        {/* </Routes>         */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}